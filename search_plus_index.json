{"./":{"url":"./","title":"前言","keywords":"","body":"一个前端 时常会思考一个现代化前端所需要具备的，然后就开始莫名的惶恐，进而囫囵吞枣，乱学一气… 俗话说的好，天下武（前）功（端），唯快（JS、TS）不破。 出发点 其实写点东西，是我萌发了很久的一个念头。怕写不好，尬。怕别人看到觉得肤浅， 虚。怕写一个点，最终变成一个面，没发收放自如，乱。 关于博客 一直都想着找个合适的方式用来记录一些东西，从Hexo、Wordpress、Vuepress、Gitbook…之类，到自己利用Nuxt了实现一套博客系统，但终究是 花里胡哨，不够完美。在工具上花费了大量的时间和精力。 本博客使用Gitbook搭建， 源文件托管于Github。 在Github Actions的助力下，解决了手动部署，Gitbook国内环境慢等问题。这才是我理想中的笔记类托管方式。 powered by Gitbook文件修订时间： 2020/10/09 09:33:57 "},"gitbook/plugins/plugins.html":{"url":"gitbook/plugins/plugins.html","title":"插件","keywords":"","body":"GitBook 插件 仅以此记录本博客所用插件，随文留注插件github仓库地址，便于后续查阅。 中文搜索 - search-pro Github - github 中文搜索 - anchors 锚点风格 - copy-code-button 返回顶部 - back-to-top-button RSS - rss 站点地图 - sitemap 待办 - todo 文字底色 - emphasize Emoji插件 - advanced-emoji 表情包 - emoji表情 网站图标 - favicon-absolute 网站logo - insert-logo powered by Gitbook文件修订时间： 2020/10/09 09:33:57 "},"gitbook/mac/":{"url":"gitbook/mac/","title":"前端环境","keywords":"","body":"前端环境 刚入职开源中国，师兄们都很照顾新同学。刚好有时间把环境重新整理一遍，毕竟老牛（Mac）也服役很长一段时间了… 基础 Git    版本管理工具 HomeBrew    工具包 Homebrew国内如何自动安装（国内地址） iTerm2    终端 oh-my-zsh    shell NVM    node版本管理器 Node    不必多言 NPM    包管理工具 Yarn    包管理工具 SwitchHosts    Hosts修改器 开发 VS Code    编辑器，谁用谁知道 Chrome    难道用safari调试 Xmind    思维逻辑图 ForkLift    FTP powered by Gitbook文件修订时间： 2020/10/09 09:33:57 "},"gitbook/react/router-params.html":{"url":"gitbook/react/router-params.html","title":"Router-传参","keywords":"","body":"Router-传参方式 官方 WEB Router文档 我也尝试弄清楚 Query 和 Params 的深层语义，但我查找了很多资料也没有找到合适的答案，也许是姿势不对 ，期待得到你的答案。接下来只能留下我自己的理解。 React-Router和Vue-Router有一定的差异。 在实际业务当中，路由带参常用于无非两种场景，React-Router同Vue-Router一样，提供了标签及函数式跳转，如下： 标签式跳转携参,  例：click 函数跳转并携参,  例：class组件 this.props.history.push(xxx) Or Hooks组件 history.push(xxxx) 显式传参 路由格式： xxxx?name=yourname&key=value优势： 用户刷新后,地址栏参数仍然存在 劣势： 安全（私密）性差，虽然我感觉仅靠客户端的安全都是胡扯 参数过多时，url长度和阅读度上都极差 url本身为string，所以仅支持值类型数据，且解析后都会转换为string // 类组件 improt React from 'react'; import { Link } from 'react-router-dom' export default class XXX extend React.Component{ …… jump = () => { this.props.history.push(`xxxx?name=${yourname}&key=${value}`) } render(){ retrun( <> // 标签跳转 jump // 函数跳转 this.jump() }>jump ) } } // 获取参数 该方式需额外处理 url解析 this.props.location.search // Hooks improt React from 'react'; import { Link, useHistory } from 'react-router-dom' export default function XXXX(){ const history = useHistory(); return( <> // 标签跳转 jump // 函数跳转 history.push(`xxxx?name=${yourname}&key=${value}`) }>jump ) } // 获取参数 import { useLocation } from 'react-router-dom' const querys = useLocation().search // Or const location = useLocation() const querys = location.search 隐式传参 路由格式： xxxx 隐式 query & params 传参： 优势： 安全（私密）性略微提升, 无论参数传递多少，Url地址栏更优雅 参数解析为Object，可通过Object.key的方式直接获取 劣势： 用户刷新后, 数据存在丢失问题 // Hooks improt React from 'react'; import { Link, useHistory } from 'react-router-dom' export default function XXXX(){ const history = useHistory(); return( <> // 标签跳转 jump jump // 函数跳转 history.push({ pathname: '/xxxx', query:{ name: 'yourname', key: value } }) }>jump history.push({ pathname: '/xxxx', params:{ name: 'yourname', key: value } }) }>jump ) } //获取参数 import { useLocation } from 'react-router-dom' const location = useLocation() const querys = location.query // { name: yourname, key: value } const params = location.params // { name: yourname, key: value } 隐式 state 传参： 优势： 安全（私密）性略微提升, 无论参数传递多少，Url地址栏更优雅 参数解析为Object，可通过Object.key的方式直接获取 用户刷新后，数据仍然存在（圈重点） 劣势： 暂时还没有发现有啥缺点 // Hooks improt React from 'react'; import { Link, useHistory } from 'react-router-dom' export default function XXXX(){ const history = useHistory(); return( <> // 标签跳转 jump // 函数跳转 history.push({ pathname: '/xxxx', state:{ name: 'yourname', key: value } }) }>jump ) } //获取参数 import { useLocation } from 'react-router-dom' const location = useLocation() const states = location.state // { name: yourname, key: value } 动态路由 格式： xxxx/2 算显式还是隐式呢。 // router.js // Hooks improt React from 'react'; import { Link, useHistory } from 'react-router-dom' export default function XXXX(){ const history = useHistory(); const id = 666; return( <> // 标签跳转 jump // 函数跳转 history.push({pathname: `/xxxx/${ id } `}) }>jump ) } //获取参数 import { useParams } from 'react-router-dom' const params = useParams() // { id: 666 } 写在最后 曾看到 V3 和 V4 版本差异较大，但毕竟我现在面的 V5.2.x版本，故而也没再去查阅版本差异。 Router传参的方式仅不限于此，刚开始接触React，还是会按照Vue当中的思路来考虑在React该如何实现，慢慢尝试着转变吧，双向借鉴，及早跳出思维固局。 powered by Gitbook文件修订时间： 2020/10/09 09:33:57 "},"gitbook/about/about.html":{"url":"gitbook/about/about.html","title":"关于我","keywords":"","body":" 你可以了解世间万物，但追根溯源的唯一途径便是亲身尝试。 关于我 从工程行业转入IT行业工作，当前工作方向主要是 前端，日常刷业务 Vue 全家桶， 对 React 也有少许相关经验，例如 Taro。 喜欢折腾一些新的技术。 个人信息： 九四年的中年大叔（暂时还没有秃顶👩‍🦲） 籍贯 四川巴中，现居 浙江宁波 热衷 看电影🎬、撸撸技术社区📖、钓鱼🎣 时间刻度 2020年9月，就职于 开源中国（OSChina），技术转栈 React。 2017年8月，从工程行业（中铁八局）转行进入前端，技术栈 Vue。 powered by Gitbook文件修订时间： 2020/10/09 09:33:57 "}}